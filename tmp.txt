python3 seq2seq_attention.py --mode test --model_dir ../../../pytorch_data/09_13_2218 --encoder=encoder_2.pth --decoder=decoder_2.pth


decoder_output.data

output = F.log_softmax(self.out(output[0]), dim=1)
なのでsoftmaxで0~1にしたあと、logで -∞~0

<class 'torch.Tensor'>
torch.Size([1, 30005])
tensor([-11.0001,  -2.5442,  -2.7432,  ..., -10.7662, -10.3689,
        -11.1510])




	東大ロボが使用していた手法はKenLM（単なる統計情報？）
	https://github.com/kpu/kenlm
	https://arxiv.org/pdf/1601.01272.pdf

	つまりは言語モデルでできるとのことなので他の言語モデルもいくつか調べた

	RNNLM ToolKit（word2vecの人が作ったものらしい）
	http://www.fit.vutbr.cz/~imikolov/rnnlm/
  https://github.com/mspandit/rnnlm
	https://qiita.com/s_chag11/items/30cc939d159ad185f8e1

	attentionつきのRNNLM（↑とは別の人）
	https://github.com/ketranm/RMN

	そしてこの論文に他のテストデータセット載ってた
	https://stackoverflow.com/questions/44373470/get-the-microsoft-research-sentence-completion-challenge
	https://dl.acm.org/citation.cfm?id=2390940.2390944


	今後はこのテストデータも使う？
	ベースラインとして自分の学習データとテストデータでKenLM，RNNLM，attentionつきRNNLMをやってみる？


  https://yidatao.github.io/2017-05-31/kenlm-ngram/
  この方法でkenLM、選択肢Bの方法ならできそうでは？




RNNLM系動かすの大変そうだからpytorchのexampleのやつ改変する？
https://github.com/pytorch/examples/tree/master/word_language_model

--- インストール手順とか ---

---- KenLM ----

git clone https://github.com/kpu/kenlm
sudo apt-get install build-essential libboost-all-dev cmake zlib1g-dev libbz2-dev liblzma-dev
cd kenlm
mkdir -p build
cd build
cmake ..
make -j 4
ここまででインストール完了

bin/lmplz -o 5 -S 80% <hoge.txt >hoge.arpa
学習データhoge.txt から モデルhoge.arpaを作成

cd ..
sudo python3 setup.py install

これでpythonからモジュールとして呼び出せる
↓のように
import kenlm
model = kenlm.Model('lm/test.arpa')
print(model.score('this is a sentence .', bos = True, eos = True))


以下、要検討
このeosが文の終わりを示すやつだからeos=Falseにすれば前方からの予測できるのでは？

time bin/lmplz -o 5 -S 80% <../../pytorch_data/text8.txt >text8.arpa

real	0m58.034s
user	0m46.156s
sys	0m11.232s

---- RNNLM ToolKit ----







---- attentionつきのRNNLM ----
※未完了
※以下の方法ではインストールできない

まずtorchのインストールから

git clone https://github.com/torch/distro.git ~/torch --recursive
cd ~/torch; bash install-deps;

↑わりと時間かかる（15分くらい？正確には数えてない）

./install.sh

↑こっちもわりと時間かかる（10分くらい？正確には数えてない）

cd
source ~/.bashrc
sudo apt-get install luarocks

export PATH="$PATH:/home/tamaki/torch/install/bin"

sudo luarocks --from=https://raw.githubusercontent.com/torch/rocks/master/ install nngraph
sudo luarocks --from=https://raw.githubusercontent.com/torch/rocks/master/ install optim
sudo luarocks --from=https://raw.githubusercontent.com/torch/rocks/master/ install nn

※以下2つうまく行かない
sudo luarocks --from=https://raw.githubusercontent.com/torch/rocks/master/ install cunn
sudo luarocks --from=https://raw.githubusercontent.com/torch/rocks/master/ install cutorch

↑もしかしてCUDAツールキットの設定からしないといけない？
一応今使ってるPCもNVIDIA製のGPUだからできなくもなさそうだけども
（ lspci | grep -i nvidia でなんか表示されたらNVIDIA製のGPUあるっぽい？ ）




ここからattentionつきのRNNLMのやつ
git clone https://github.com/ketranm/RMN
cd RMN



th RM.lua -max_seq_length 80 -min_seq_length 10 -max_epochs 20 \
-data_dir ../pytorch_data/text8.txt -print_every 200 -num_layers 1 -mem_size 15  \
-learning_rate 1 -emb_size 128 -rnn_size 128  -nhop 1 \
-checkpoint_dir checkpoint

これでは不可
いろいろエラー言われる

use gating combination
package cunn not found!
package cutorch not found!
If cutorch and cunn are installed, your CUDA toolkit may be improperly configured.
Check your CUDA toolkit installation, rebuild cutorch and cunn, and try again.
Falling back on CPU mode
vocab.t7 and data.t7 do not exist. Running preprocessing...
one-time setup
loading text file...
/home/tamaki/torch/install/bin/luajit: ./text/TextProcessor.lua:111: bad argument #1 to 'lines' (../pytorch_data/text8.txt/train.txt: Not a directory)
stack traceback:
	[C]: in function 'lines'
	./text/TextProcessor.lua:111: in function 'text_to_tensor'
	./text/TextProcessor.lua:44: in function 'create'
	RM.lua:89: in main chunk
	[C]: in function 'dofile'
	...maki/torch/install/lib/luarocks/rocks/trepl/scm-1/bin/th:150: in main chunk
	[C]: at 0x00405d50


ここわかりやすい
https://www.hellocybernetics.tech/entry/2017/10/19/070522#Torch%E3%81%AE%E7%B5%B6%E5%AF%BE%E6%8A%BC%E3%81%95%E3%81%88%E3%81%A6%E3%81%8A%E3%81%8F%E9%96%A2%E6%95%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89
